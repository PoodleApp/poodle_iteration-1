/* @flow */

import { List }                                        from 'immutable'
import { mailtoUri }                                   from '../activity'
import { midUri, midPartUri, parseMidUri, resolveUri } from '../models/message'
import { ActivityRecord }                              from '../derivedActivity'
import { displayName }                                 from '../models/address'

import type { Message }         from '../models/message'
import type { Zack }            from '../activity'
import type { DerivedActivity } from '../derivedActivity'

export {
  unwrapMessage,
}

function unwrapMessage(message: Message): List<DerivedActivity> {
  var activities: DerivedActivity[] = (message.attachments || []).filter(a => (
    a.contentType === 'application/activity+json'
  ))
  .map(attachment => new ActivityRecord({
    id: handleLegacyId(attachment, message),
    activity: JSON.parse(attachment.content.toString('utf8')),  // TODO: content needs to be fetched from database
    message,
  }))
  if (activities.length > 0) {
    return List(activities)
  }
  else {
    var note = asNote(message)
    return List(note ? [note] : [unknownActivity(message)])
  }
}

// TODO: Get rid of this eventually.
function handleLegacyId(attachment, message) {
  if (attachment.contentId.match(/@mailparser$/)) {
    // This is a bogus ID generated by the mail parsing library - the actual
    // MIME part did not get a 'Content-ID' header
    var activity = JSON.parse(attachment.content.toString('utf8'))
    var parsed = !!activity.id && parseMidUri(activity.id)
    if (parsed) {
      return resolveUri(message, activity.id)
    }
  }
  return midPartUri(attachment, message)
}

// TODO: Should the synthetic note and unknown activities be derived activities?
function asNote(message: Message): ?DerivedActivity {
  var from = message.from[0]
  var author = {
    objectType: 'person',
    displayName: displayName(from),
    id: mailtoUri(from.address),
  }
  if (message.text || message.html) {
    var activity = {
      title: message.subject,
      verb: (message.inReplyTo && message.inReplyTo.length > 0) ? 'reply' : 'post',
      object: {
        objectType: 'note',
        author,
        uri: midUri(message),
      }
    }
    return new ActivityRecord({
      id: midUri(message),
      activity,
      message,
    })
  }
}

function unknownActivity(message: Message): DerivedActivity {
  var activity = {
    title: message.subject,
    verb: 'unknown',
  }
  return new ActivityRecord({
    id: midUri(message),
    activity,
    message,
  })
}
